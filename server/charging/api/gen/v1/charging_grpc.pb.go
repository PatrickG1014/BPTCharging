// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: charging.proto

package chargingpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChargingServiceClient is the client API for ChargingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChargingServiceClient interface {
	StartCharging(ctx context.Context, in *StartChargingRequest, opts ...grpc.CallOption) (*StartChargingResponse, error)
}

type chargingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChargingServiceClient(cc grpc.ClientConnInterface) ChargingServiceClient {
	return &chargingServiceClient{cc}
}

func (c *chargingServiceClient) StartCharging(ctx context.Context, in *StartChargingRequest, opts ...grpc.CallOption) (*StartChargingResponse, error) {
	out := new(StartChargingResponse)
	err := c.cc.Invoke(ctx, "/charging.v1.ChargingService/StartCharging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChargingServiceServer is the server API for ChargingService service.
// All implementations must embed UnimplementedChargingServiceServer
// for forward compatibility
type ChargingServiceServer interface {
	StartCharging(context.Context, *StartChargingRequest) (*StartChargingResponse, error)
	mustEmbedUnimplementedChargingServiceServer()
}

// UnimplementedChargingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChargingServiceServer struct {
}

func (UnimplementedChargingServiceServer) StartCharging(context.Context, *StartChargingRequest) (*StartChargingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCharging not implemented")
}
func (UnimplementedChargingServiceServer) mustEmbedUnimplementedChargingServiceServer() {}

// UnsafeChargingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChargingServiceServer will
// result in compilation errors.
type UnsafeChargingServiceServer interface {
	mustEmbedUnimplementedChargingServiceServer()
}

func RegisterChargingServiceServer(s grpc.ServiceRegistrar, srv ChargingServiceServer) {
	s.RegisterService(&ChargingService_ServiceDesc, srv)
}

func _ChargingService_StartCharging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartChargingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargingServiceServer).StartCharging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charging.v1.ChargingService/StartCharging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargingServiceServer).StartCharging(ctx, req.(*StartChargingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChargingService_ServiceDesc is the grpc.ServiceDesc for ChargingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChargingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "charging.v1.ChargingService",
	HandlerType: (*ChargingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartCharging",
			Handler:    _ChargingService_StartCharging_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "charging.proto",
}
